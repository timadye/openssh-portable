Apply this patch to OpenSSH 7.4p1 and build as normal.
This will make ssh-store as well as special versions of ssh-agent, scp, and sftp
(these scp and sftp don't disable agent forwarding and don't use the new
PermitLocalCommand option that is not supported by older versions of the ssh
client - useful if scp/sftp use the system default ssh).

On Linux, to make executables with static SSL libraries (libcrypto) etc,
make with:

  make LIBS="-Wl,-Bstatic -lcrypto -lutil -lz -lnsl -lcrypt -lresolv -Wl,-Bdynamic"

or whatever configure lists as libraries (last line of summary) with -Wl,-Bstatic
at the beginning and -lresolv -Wl,-Bdynamic at the end.

Add SSH_PROGRAM=ssh to get scp and sftp to use ssh from the PATH, rather than
the hard-coded /usr/local/bin/ssh.

The following are instructions for compiling with OpenSSH 5.2p1 with a previous version of this patch...

I built openssh-5.2p1-store-i386_linux24.tar.bz2 on yakut02 (Scientific Linux 3.0.9) with:

cd /usr/work/adye
wget http://hepunx.rl.ac.uk/~adye/software/ssh-store4.patch
wget -N ftp://ftp.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-5.2p1.tar.gz
tar zxf openssh-5.2p1.tar.gz
cd openssh-5.2p1
patch -Zp1 < ../ssh-store4.patch
./configure
make install DESTDIR=/usr/work/adye/openssh-5.2p1-bin LIBS="-Wl,-Bstatic -lcrypto -lutil -lz -lnsl -lcrypt -lresolv -Wl,-Bdynamic" SSH_PROGRAM=ssh
cd /usr/work/adye/openssh-5.2p1-bin
find * \! -type d | tar cvjfT ../openssh-5.2p1-store-i386_linux24.tar.bz2 -

I built openssh-5.2p1-store-sun4x_510.tar.bz2 on tersk01 (SunOS 5.10) with:

wget http://hepunx.rl.ac.uk/~adye/software/ssh-store4.patch
wget -N ftp://ftp.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-5.2p1.tar.gz
gunzip openssh-5.2p1.tar.gz
tar xf openssh-5.2p1.tar
cd openssh-5.2p1
patch -p1 < ../ssh-store4.patch
./configure
make install DESTDIR=/usr/work/adye/openssh-5.2p1-bin SSH_PROGRAM=ssh
cd /usr/work/adye/openssh-5.2p1-bin
tar cf ../openssh-5.2p1-store-sun4x_510.tar `find * \! -type d`
bzip2 ../openssh-5.2p1-store-sun4x_510.tar

diff -Nur openssh-6.7p1.orig/authfd.c openssh-6.7p1/authfd.c
--- openssh-6.7p1.orig/authfd.c	2014-05-15 05:24:10.000000000 +0100
+++ openssh-6.7p1/authfd.c	2017-03-05 14:39:08.527783200 +0000
@@ -651,6 +651,155 @@
 }
 
 int
+ssh_set_variable(AuthenticationConnection *auth, const char *var, u_int lvar, const char *val, u_int lval)
+{
+	Buffer msg;
+	int type;
+
+	buffer_init(&msg);
+	buffer_put_char(&msg, SSH_AGENTC_SET_VARIABLE);
+  buffer_put_string(&msg, var, lvar);
+  buffer_put_string(&msg, val, lval);
+	if (ssh_request_reply(auth, &msg, &msg) == 0) {
+		buffer_free(&msg);
+		return 0;
+	}
+	type = buffer_get_char(&msg);
+	buffer_free(&msg);
+  if (type == SSH_AGENT_VARIABLE_REPLACED) return 2;
+	return decode_reply(type);
+}
+
+
+int
+ssh_get_variable(AuthenticationConnection *auth, const char *var, u_int lvar, char **valp, u_int *lvalp)
+{
+	Buffer msg;
+	int ret = 0;
+	int type;
+
+  *valp= NULL;
+  if (lvalp) *lvalp= 0;
+	buffer_init(&msg);
+	buffer_put_char(&msg, SSH_AGENTC_GET_VARIABLE);
+  buffer_put_string(&msg, var, lvar);
+	if (ssh_request_reply(auth, &msg, &msg) == 0) {
+		buffer_free(&msg);
+		return 0;
+	}
+	type = buffer_get_char(&msg);
+	if (agent_failed(type)) {
+		logit("Agent could not get variable.");
+	} else if (type == SSH_AGENT_GET_VARIABLE_ANSWER) {
+		*valp = buffer_get_string(&msg, lvalp);
+		ret = 1;
+	} else if (type == SSH_AGENT_NO_VARIABLE) {
+    ret = 2;
+	} else {
+		fatal("Bad authentication response: %d", type);
+	}
+	buffer_free(&msg);
+	return ret;
+}
+
+
+/*
+ * Returns the first variable held by the agent.
+ */
+
+static int
+ssh_get_num_variables(AuthenticationConnection *auth, const char *prefix, u_int lprefix, char full)
+{
+	Buffer request;
+	int type;
+
+  if (!prefix) {
+    prefix = "";
+    lprefix = 0;
+  }
+	buffer_init(&request);
+	buffer_put_char(&request, full ? SSH_AGENTC_LIST_VARIABLES : SSH_AGENTC_LIST_VARIABLE_NAMES);
+  buffer_put_string(&request, prefix, lprefix);
+
+	buffer_clear(&auth->identities);
+	if (ssh_request_reply(auth, &request, &auth->identities) == 0) {
+		buffer_free(&request);
+		return 0;
+	}
+	buffer_free(&request);
+
+	/* Get message type, and verify that we got a proper answer. */
+	type = buffer_get_char(&auth->identities);
+	if (agent_failed(type)) {
+		return 0;
+	} else if (type != (full ? SSH_AGENT_VARIABLES_ANSWER : SSH_AGENT_VARIABLE_NAMES_ANSWER)) {
+		fatal("Bad authentication reply message type: %d", type);
+	}
+
+	/* Get the number of entries in the response and check it for sanity. */
+	auth->howmany = buffer_get_int(&auth->identities);
+	if ((u_int)auth->howmany > 1024)
+		fatal("Too many variables in agent's reply: %d",
+		    auth->howmany);
+
+	return auth->howmany;
+}
+
+int
+ssh_get_first_variable(AuthenticationConnection *auth, const char *prefix, u_int lprefix, char full,
+                       char **varp, u_int *lvarp, char **valp, u_int *lvalp)
+{
+	/* get number of identities and return the first entry (if any). */
+	if (ssh_get_num_variables(auth, prefix, lprefix, full) > 0)
+		return ssh_get_next_variable(auth, full, varp, lvarp, valp, lvalp);
+	return 0;
+}
+
+int
+ssh_get_next_variable(AuthenticationConnection *auth, char full,
+                      char **varp, u_int *lvarp, char **valp, u_int *lvalp)
+{
+  *varp = *valp = NULL;
+  *lvarp = *lvalp = 0;
+	/* Return failure if no more entries. */
+	if (auth->howmany <= 0)
+		return 0;
+
+	/*
+	 * Get the next entry from the packet.  These will abort with a fatal
+	 * error if the packet is too short or contains corrupt data.
+	 */
+  *varp = buffer_get_string(&auth->identities, lvarp);
+  if (full) *valp = buffer_get_string(&auth->identities, lvalp);
+	/* Decrement the number of remaining entries. */
+	auth->howmany--;
+	return 1;
+}
+
+int
+ssh_delete_variable(AuthenticationConnection *auth, const char *var, u_int lvar, char all)
+{
+	Buffer msg;
+	int type;
+  if (all && !var) {
+    var = "";
+    lvar = 0;
+  }
+
+	buffer_init(&msg);
+	buffer_put_char(&msg, all ? SSH_AGENTC_REMOVE_ALL_VARIABLES : SSH_AGENTC_REMOVE_VARIABLE);
+  buffer_put_string(&msg, var, lvar);
+	if (ssh_request_reply(auth, &msg, &msg) == 0) {
+		buffer_free(&msg);
+		return 0;
+	}
+	type = buffer_get_char(&msg);
+	buffer_free(&msg);
+  if (var && type == SSH_AGENT_NO_VARIABLE) return 2;
+	return decode_reply(type);
+}
+
+int
 decode_reply(int type)
 {
 	switch (type) {
diff -Nur openssh-6.7p1.orig/authfd.h openssh-6.7p1/authfd.h
--- openssh-6.7p1.orig/authfd.h	2009-10-06 22:47:02.000000000 +0100
+++ openssh-6.7p1/authfd.h	2017-03-05 14:39:08.537779000 +0000
@@ -49,6 +49,19 @@
 #define SSH2_AGENTC_ADD_ID_CONSTRAINED		25
 #define SSH_AGENTC_ADD_SMARTCARD_KEY_CONSTRAINED 26
 
+/* ssh-store commands */
+#define SSH_AGENTC_SET_VARIABLE			40
+#define SSH_AGENT_VARIABLE_REPLACED		41
+#define SSH_AGENTC_GET_VARIABLE			42
+#define SSH_AGENT_GET_VARIABLE_ANSWER		43
+#define SSH_AGENT_NO_VARIABLE			44
+#define SSH_AGENTC_LIST_VARIABLE_NAMES		45
+#define SSH_AGENT_VARIABLE_NAMES_ANSWER		46
+#define SSH_AGENTC_LIST_VARIABLES		47
+#define SSH_AGENT_VARIABLES_ANSWER		48
+#define SSH_AGENTC_REMOVE_VARIABLE		49
+#define SSH_AGENTC_REMOVE_ALL_VARIABLES		50
+
 #define	SSH_AGENT_CONSTRAIN_LIFETIME		1
 #define	SSH_AGENT_CONSTRAIN_CONFIRM		2
 
@@ -91,4 +104,15 @@
 ssh_agent_sign(AuthenticationConnection *, Key *, u_char **, u_int *, u_char *,
     u_int);
 
+int
+ssh_set_variable(AuthenticationConnection *, const char *, u_int, const char *, u_int);
+int
+ssh_get_variable(AuthenticationConnection *, const char *, u_int, char **, u_int *);
+int
+ssh_get_first_variable(AuthenticationConnection *, const char *, u_int, char, char **, u_int *, char **, u_int *);
+int
+ssh_get_next_variable(AuthenticationConnection *, char, char **, u_int *, char **, u_int *);
+int
+ssh_delete_variable(AuthenticationConnection *, const char *, u_int, char);
+
 #endif				/* AUTHFD_H */
diff -Nur openssh-6.7p1.orig/Makefile.in openssh-6.7p1/Makefile.in
--- openssh-6.7p1.orig/Makefile.in	2014-08-30 07:23:07.000000000 +0100
+++ openssh-6.7p1/Makefile.in	2017-03-05 15:11:30.170254100 +0000
@@ -62,7 +62,7 @@
 EXEEXT=@EXEEXT@
 MANFMT=@MANFMT@
 
-TARGETS=ssh$(EXEEXT) sshd$(EXEEXT) ssh-add$(EXEEXT) ssh-keygen$(EXEEXT) ssh-keyscan${EXEEXT} ssh-keysign${EXEEXT} ssh-pkcs11-helper$(EXEEXT) ssh-agent$(EXEEXT) scp$(EXEEXT) sftp-server$(EXEEXT) sftp$(EXEEXT)
+TARGETS=ssh$(EXEEXT) sshd$(EXEEXT) ssh-add$(EXEEXT) ssh-store$(EXEEXT) ssh-keygen$(EXEEXT) ssh-keyscan${EXEEXT} ssh-keysign${EXEEXT} ssh-pkcs11-helper$(EXEEXT) ssh-agent$(EXEEXT) scp$(EXEEXT) sftp-server$(EXEEXT) sftp$(EXEEXT)
 
 LIBOPENSSH_OBJS=\
 	ssherr.o \
@@ -168,6 +168,9 @@
 ssh-add$(EXEEXT): $(LIBCOMPAT) libssh.a ssh-add.o
 	$(LD) -o $@ ssh-add.o $(LDFLAGS) -lssh -lopenbsd-compat $(LIBS)
 
+ssh-store$(EXEEXT): $(LIBCOMPAT) libssh.a ssh-store.o
+	$(LD) -o $@ ssh-store.o $(LDFLAGS) -lssh -lopenbsd-compat $(LIBS)
+
 ssh-agent$(EXEEXT): $(LIBCOMPAT) libssh.a ssh-agent.o ssh-pkcs11-client.o
 	$(LD) -o $@ ssh-agent.o ssh-pkcs11-client.o $(LDFLAGS) -lssh -lopenbsd-compat $(LIBS)
 
@@ -289,6 +292,7 @@
 	$(INSTALL) -m 0755 $(STRIP_OPT) ssh$(EXEEXT) $(DESTDIR)$(bindir)/ssh$(EXEEXT)
 	$(INSTALL) -m 0755 $(STRIP_OPT) scp$(EXEEXT) $(DESTDIR)$(bindir)/scp$(EXEEXT)
 	$(INSTALL) -m 0755 $(STRIP_OPT) ssh-add$(EXEEXT) $(DESTDIR)$(bindir)/ssh-add$(EXEEXT)
+	$(INSTALL) -m 0755 $(STRIP_OPT) ssh-store$(EXEEXT) $(DESTDIR)$(bindir)/ssh-store$(EXEEXT)
 	$(INSTALL) -m 0755 $(STRIP_OPT) ssh-agent$(EXEEXT) $(DESTDIR)$(bindir)/ssh-agent$(EXEEXT)
 	$(INSTALL) -m 0755 $(STRIP_OPT) ssh-keygen$(EXEEXT) $(DESTDIR)$(bindir)/ssh-keygen$(EXEEXT)
 	$(INSTALL) -m 0755 $(STRIP_OPT) ssh-keyscan$(EXEEXT) $(DESTDIR)$(bindir)/ssh-keyscan$(EXEEXT)
@@ -395,6 +399,7 @@
 	-rm -f $(DESTDIR)$(bindir)/ssh$(EXEEXT)
 	-rm -f $(DESTDIR)$(bindir)/scp$(EXEEXT)
 	-rm -f $(DESTDIR)$(bindir)/ssh-add$(EXEEXT)
+	-rm -f $(DESTDIR)$(bindir)/ssh-store$(EXEEXT)
 	-rm -f $(DESTDIR)$(bindir)/ssh-agent$(EXEEXT)
 	-rm -f $(DESTDIR)$(bindir)/ssh-keygen$(EXEEXT)
 	-rm -f $(DESTDIR)$(bindir)/ssh-keyscan$(EXEEXT)
diff -Nur openssh-6.7p1.orig/scp.c openssh-6.7p1/scp.c
--- openssh-6.7p1.orig/scp.c	2014-07-02 06:29:01.000000000 +0100
+++ openssh-6.7p1/scp.c	2017-03-05 15:12:37.596402000 +0000
@@ -390,8 +390,6 @@
 	args.list = remote_remote_args.list = NULL;
 	addargs(&args, "%s", ssh_program);
 	addargs(&args, "-x");
-	addargs(&args, "-oForwardAgent=no");
-	addargs(&args, "-oPermitLocalCommand=no");
 	addargs(&args, "-oClearAllForwardings=yes");
 
 	fflag = tflag = 0;
diff -Nur openssh-6.7p1.orig/sftp.c openssh-6.7p1/sftp.c
--- openssh-6.7p1.orig/sftp.c	2014-07-09 04:07:06.000000000 +0100
+++ openssh-6.7p1/sftp.c	2017-03-05 14:39:08.578885200 +0000
@@ -2251,8 +2251,6 @@
 	args.list = NULL;
 	addargs(&args, "%s", ssh_program);
 	addargs(&args, "-oForwardX11 no");
-	addargs(&args, "-oForwardAgent no");
-	addargs(&args, "-oPermitLocalCommand no");
 	addargs(&args, "-oClearAllForwardings yes");
 
 	ll = SYSLOG_LEVEL_INFO;
diff -Nur openssh-6.7p1.orig/ssh-agent.c openssh-6.7p1/ssh-agent.c
--- openssh-6.7p1.orig/ssh-agent.c	2014-07-30 03:32:46.000000000 +0100
+++ openssh-6.7p1/ssh-agent.c	2017-03-05 15:21:31.761440700 +0000
@@ -120,6 +120,21 @@
 /* private key table, one per protocol version */
 Idtab idtable[3];
 
+typedef struct variable {
+	TAILQ_ENTRY(variable) next;
+	char *var;
+	char *val;
+	u_int lvar;
+	u_int lval;
+} Variable;
+
+typedef struct {
+	int nentries;
+	TAILQ_HEAD(varqueue, variable) varlist;
+} Vartab;
+
+Vartab vartable;
+
 int max_fd = 0;
 
 /* pid of shell == parent of agent */
@@ -164,6 +179,13 @@
 	}
 }
 
+static void
+vartab_init(void)
+{
+  TAILQ_INIT(&vartable.varlist);
+  vartable.nentries = 0;
+}
+
 /* return private key table for requested protocol version */
 static Idtab *
 idtab_lookup(int version)
@@ -182,6 +204,14 @@
 	free(id);
 }
 
+static void
+free_variable(Variable *v)
+{
+  free(v->var);
+  free(v->val);
+	free(v);
+}
+
 /* return matching private key for given public key */
 static Identity *
 lookup_identity(Key *key, int version)
@@ -701,6 +731,185 @@
 }
 #endif /* ENABLE_PKCS11 */
 
+/* return variable entry for given name */
+static Variable *
+lookup_variable(const char *var, u_int lvar)
+{
+	Variable *v;
+
+	TAILQ_FOREACH(v, &vartable.varlist, next) {
+		if (lvar == v->lvar && 0 == memcmp(var, v->var, lvar))
+      return (v);
+	}
+	return (NULL);
+}
+
+
+static void
+process_set_variable(SocketEntry *e)
+{
+	u_int lvar, lval;
+	char *var, *val;
+  Variable *v;
+  int replace = 0;
+
+  var= buffer_get_string(&e->request, &lvar);
+  val= buffer_get_string(&e->request, &lval);
+
+  if ((v = lookup_variable(var, lvar))) {
+    debug("set '%.*s' = '%.*s' (replacing old value '%.*s')", lvar, var, lval, val, v->lval, v->val);
+    free(var);
+    free(v->val);
+    replace = 1;
+  } else {
+    debug("set '%.*s' = '%.*s'", lvar, var, lval, val);
+    v = xmalloc(sizeof(Variable));
+    v->var = var;
+    v->lvar = lvar;
+    TAILQ_INSERT_TAIL(&vartable.varlist, v, next);
+    vartable.nentries++;
+  }
+  v->val = val;
+  v->lval = lval;
+	buffer_put_int(&e->output, 1);
+	buffer_put_char(&e->output, replace ? SSH_AGENT_VARIABLE_REPLACED : SSH_AGENT_SUCCESS);
+}
+
+
+static void
+process_get_variable(SocketEntry *e)
+{
+	u_int lvar;
+	char *var;
+  Variable *v;
+	Buffer msg;
+
+  var= buffer_get_string(&e->request, &lvar);
+
+	buffer_init(&msg);
+  if ((v = lookup_variable(var, lvar))) {
+    debug("get '%.*s' -> '%.*s'", lvar, var, v->lval, v->val);
+    buffer_put_char(&msg, SSH_AGENT_GET_VARIABLE_ANSWER);
+    buffer_put_string(&msg, v->val, v->lval);
+  } else {
+    debug("variable '%.*s' not found", lvar, var);
+    buffer_put_char(&msg, SSH_AGENT_NO_VARIABLE);
+  }
+  free(var);
+	buffer_put_int(&e->output, buffer_len(&msg));
+	buffer_append(&e->output, buffer_ptr(&msg), buffer_len(&msg));
+	buffer_free(&msg);
+}
+
+/* send list of variables */
+static void
+process_list_variables(SocketEntry *e, char full)
+{
+	Buffer msg, msg2;
+  char *prefix;
+  u_int lprefix, nret = 0;
+  Variable *v;
+
+  prefix= buffer_get_string(&e->request, &lprefix);
+	buffer_init(&msg);
+	TAILQ_FOREACH(v, &vartable.varlist, next) {
+    if (lprefix == 0 || (v->lvar >= lprefix && 0 == memcmp (v->var, prefix, lprefix))) {
+      buffer_put_string(&msg, v->var, v->lvar);
+      if (full) buffer_put_string(&msg, v->val, v->lval);
+      nret++;
+    }
+	}
+  free(prefix);
+	buffer_init(&msg2);
+	buffer_put_char(&msg2, full ?
+	    SSH_AGENT_VARIABLES_ANSWER : SSH_AGENT_VARIABLE_NAMES_ANSWER);
+	buffer_put_int(&msg2, nret);
+	buffer_put_int(&e->output, buffer_len(&msg)+buffer_len(&msg2));
+	buffer_append(&e->output, buffer_ptr(&msg2), buffer_len(&msg2));
+	buffer_append(&e->output, buffer_ptr(&msg), buffer_len(&msg));
+	buffer_free(&msg);
+}
+
+static void
+no_variables(SocketEntry *e, u_int type)
+{
+	Buffer msg;
+
+	buffer_init(&msg);
+	buffer_put_char(&msg,
+	    (type == SSH_AGENTC_LIST_VARIABLES) ?
+	    SSH_AGENT_VARIABLES_ANSWER : SSH_AGENT_VARIABLE_NAMES_ANSWER);
+	buffer_put_int(&msg, 0);
+	buffer_put_int(&e->output, buffer_len(&msg));
+	buffer_append(&e->output, buffer_ptr(&msg), buffer_len(&msg));
+	buffer_free(&msg);
+}
+
+/* shared */
+static void
+process_remove_variable(SocketEntry *e)
+{
+	int success = 0;
+	u_int lvar;
+	char *var;
+  Variable *v;
+
+  var= buffer_get_string(&e->request, &lvar);
+
+  if ((v = lookup_variable(var, lvar))) {
+    /*
+     * We have this key.  Free the old key.  Since we
+     * don't want to leave empty slots in the middle of
+     * the array, we actually free the key there and move
+     * all the entries between the empty slot and the end
+     * of the array.
+     */
+    if (vartable.nentries < 1)
+      fatal("process_remove_identity: "
+				    "internal error: vartable.nentries %d",
+				    vartable.nentries);
+    TAILQ_REMOVE(&vartable.varlist, v, next);
+    free_variable (v);
+    vartable.nentries--;
+    success = 1;
+	}
+  free (var);
+	buffer_put_int(&e->output, 1);
+	buffer_put_char(&e->output,
+	    success ? SSH_AGENT_SUCCESS : SSH_AGENT_NO_VARIABLE);
+}
+
+static void
+process_remove_all_variables(SocketEntry *e)
+{
+  char *prefix;
+  u_int lprefix, ndel = 0;
+  Variable *v, *last = NULL;
+
+  prefix= buffer_get_string(&e->request, &lprefix);
+	TAILQ_FOREACH(v, &vartable.varlist, next) {
+    if (last) {   /* don't remove variable until we've moved past it */
+      TAILQ_REMOVE(&vartable.varlist, last, next);
+      free_variable (last);
+      last = NULL;
+    }
+    if (lprefix == 0 || (v->lvar >= lprefix && 0 == memcmp (v->var, prefix, lprefix))) {
+      vartable.nentries--;
+      ndel++;
+      last = v;
+    }
+	}
+  if (last) {
+    TAILQ_REMOVE(&vartable.varlist, last, next);
+    free_variable (last);
+  }
+  free(prefix);
+
+	/* Send success. */
+	buffer_put_int(&e->output, 1);
+	buffer_put_char(&e->output, ndel ? SSH_AGENT_SUCCESS : SSH_AGENT_NO_VARIABLE);
+}
+
 /* dispatch incoming messages */
 
 static void
@@ -736,6 +945,10 @@
 			/* send empty lists */
 			no_identities(e, type);
 			break;
+    case SSH_AGENTC_LIST_VARIABLE_NAMES:
+    case SSH_AGENTC_LIST_VARIABLES:
+      no_variables(e, type);
+      break;
 		default:
 			/* send a fail message for all other request types */
 			buffer_put_int(&e->output, 1);
@@ -795,6 +1008,24 @@
 		process_remove_smartcard_key(e);
 		break;
 #endif /* ENABLE_PKCS11 */
+	case SSH_AGENTC_SET_VARIABLE:
+		process_set_variable(e);
+		break;
+	case SSH_AGENTC_GET_VARIABLE:
+		process_get_variable(e);
+		break;
+	case SSH_AGENTC_LIST_VARIABLE_NAMES:
+		process_list_variables(e, 0);
+		break;
+	case SSH_AGENTC_LIST_VARIABLES:
+		process_list_variables(e, 1);
+		break;
+	case SSH_AGENTC_REMOVE_VARIABLE:
+		process_remove_variable(e);
+		break;
+	case SSH_AGENTC_REMOVE_ALL_VARIABLES:
+		process_remove_all_variables(e);
+		break;
 	default:
 		/* Unknown message.  Respond with failure. */
 		error("Unknown message %d", type);
@@ -1246,6 +1477,7 @@
 	if (ac > 0)
 		parent_alive_interval = 10;
 	idtab_init();
+	vartab_init();
 	signal(SIGPIPE, SIG_IGN);
 	signal(SIGINT, d_flag ? cleanup_handler : SIG_IGN);
 	signal(SIGHUP, cleanup_handler);
diff -Nur openssh-6.7p1.orig/ssh-store.c openssh-6.7p1/ssh-store.c
--- openssh-6.7p1.orig/ssh-store.c	1970-01-01 01:00:00.000000000 +0100
+++ openssh-6.7p1/ssh-store.c	2017-03-05 15:21:50.388923900 +0000
@@ -0,0 +1,247 @@
+/* $OpenBSD: ssh-store.c,v 1.89 2006/08/03 03:34:42 deraadt Exp $ */
+/*
+ * ssh-store.c by Tim Adye <T.J.Adye@rl.ac.uk>, based on ssh-add.c.
+ *
+ * ssh-add.c:-
+ * Author: Tatu Ylonen <ylo@cs.hut.fi>
+ * Copyright (c) 1995 Tatu Ylonen <ylo@cs.hut.fi>, Espoo, Finland
+ *                    All rights reserved
+ * Adds an identity to the authentication server, or removes an identity.
+ *
+ * As far as I am concerned, the code I have written for this software
+ * can be used freely for any purpose.  Any derived versions of this
+ * software must be clearly marked as such, and if the derived work is
+ * incompatible with the protocol description in the RFC file, it must be
+ * called by a name other than "ssh" or "Secure Shell".
+ *
+ * SSH2 implementation,
+ * Copyright (c) 2000, 2001 Markus Friedl.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "includes.h"
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/param.h>
+
+#include <openssl/evp.h>
+
+#include <fcntl.h>
+#include <pwd.h>
+#include <stdarg.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+#include "xmalloc.h"
+#include "ssh.h"
+#include "rsa.h"
+#include "log.h"
+#include "key.h"
+#include "buffer.h"
+#include "authfd.h"
+#include "authfile.h"
+#include "pathnames.h"
+#include "misc.h"
+
+/* argv0 */
+extern char *__progname;
+#define CHUNK 1024
+
+int
+set_from_file(AuthenticationConnection *auth, const char *var, u_int lvar, const char *file)
+{
+  FILE *f;
+  char *val = NULL;
+  u_int lval = 0;
+  size_t n;
+  int ret;
+
+  if (file && 0 != strcmp (file, "-")) {
+    f = fopen (file, "r");
+    if (!f) {
+      fprintf (stderr, "%s: could not open %s\n", __progname, file);
+      return 3;
+    }
+  } else {
+    f = stdin;
+  }
+  lval = 0;
+  do {
+    val= xrealloc (val, lval+CHUNK, 1);
+    n = fread (val+lval, 1, CHUNK, f);
+    lval += n;
+  } while (n == CHUNK);
+  if (lval > 0 && val[lval-1] == '\n') lval--;
+  ret = ssh_set_variable (auth, var, lvar, val, lval);
+  free (val);
+  return ret;
+}
+
+static int
+print_variable(AuthenticationConnection *auth, const char *var, u_int lvar)
+{
+	int ret = 0;
+  char *val;
+  u_int lval;
+
+  ret = ssh_get_variable(auth, var, lvar, &val, &lval);
+  if (ret && val) {
+    fwrite (val, 1, lval, stdout);
+    putchar ('\n');
+    free(val);
+  }
+	return ret;
+}
+
+static int
+list_variables(AuthenticationConnection *ac, const char* prefix, u_int lprefix, char full)
+{
+	char *var, *val;
+  u_int lvar, lval;
+	int ok, nvars = 0;
+
+  for (ok = ssh_get_first_variable(ac, prefix, lprefix, full, &var, &lvar, &val, &lval);
+       ok;
+       ok = ssh_get_next_variable(ac, full, &var, &lvar, &val, &lval)) {
+    fwrite (var, 1, lvar, stdout);
+    if (full && val) {
+      putchar (' ');
+      fwrite (val, 1, lval, stdout);
+    }
+    putchar ('\n');
+    free(var);
+    if (val) free(val);
+    nvars++;
+	}
+  return (nvars==0 ? 2 : 1);
+}
+
+static void
+usage(void)
+{
+	fprintf(stderr, "Usage: %s [options] variable [value]\n", __progname);
+	fprintf(stderr, "Options:\n");
+	fprintf(stderr, "  -s          Set variable (default if value specified).\n");
+	fprintf(stderr, "  -f          Set value from a file (specified as second argument, or else stdin).\n");
+	fprintf(stderr, "  -g          Get variable value (default if value not specified).\n");
+	fprintf(stderr, "  -l          List stored variables.\n");
+	fprintf(stderr, "  -L          List stored variables and their values (may include binary values)\n");
+	fprintf(stderr, "  -d          Delete stored value.\n");
+	fprintf(stderr, "  -D          Delete all stored values.\n");
+}
+
+int
+main(int argc, char **argv)
+{
+	extern char *optarg;
+	extern int optind;
+	AuthenticationConnection *ac = NULL;
+	int ch, set = 0, get = 0, list = 0, delete = 0, ret = 0;
+
+	/* Ensure that fds 0, 1 and 2 are open or directed to /dev/null */
+	sanitise_stdfd();
+
+	__progname = ssh_get_progname(argv[0]);
+
+	/* At first, get a connection to the authentication agent. */
+	ac = ssh_get_authentication_connection();
+	if (ac == NULL) {
+		fprintf(stderr,
+		    "Could not open a connection to your authentication agent.\n");
+		exit(2);
+	}
+	while ((ch = getopt(argc, argv, "hsfglLdD")) != -1) {
+		switch (ch) {
+		case 's':
+      set = 1;
+			break;
+		case 'f':
+      set = 2;
+			break;
+		case 'g':
+      get = 1;
+			break;
+		case 'l':
+      list = 1;
+      break;
+		case 'L':
+      list = 2;
+      break;
+		case 'd':
+			delete = 1;
+			break;
+		case 'D':
+			delete = 2;
+			break;
+		default:
+			usage();
+			ret = 2;
+			goto done;
+		}
+	}
+	argc -= optind;
+	argv += optind;
+
+  if ((set == 1 && argc != 2) ||
+      (set == 2 && (argc < 1 || argc > 2)) ||
+      ((get || delete == 1) && argc != 1) ||
+      ((list || delete == 2) && argc > 1) ||
+      ((!!set)+(!!get)+(!!list)+(!!delete) > 1)) {
+    fprintf (stderr, "%s: bad options\n", __progname);
+    goto done;
+  }
+  if (!(set || get || list || delete)) {
+    if      (argc == 1) get = 1;
+    else if (argc == 2) set = 1;
+    else {
+      usage();
+      goto done;
+    }
+  }
+
+  if        (set == 2) {
+    ret = set_from_file       (ac, argv[0], strlen(argv[0]), (argc >= 2 ? argv[1] : NULL));
+  } else if (set) {
+    ret = ssh_set_variable    (ac, argv[0], strlen(argv[0]), argv[1], strlen(argv[1]));
+  } else if (get) {
+    ret = print_variable      (ac, argv[0], strlen(argv[0]));
+  } else if (list) {
+    if (argc >= 1) {
+      ret = list_variables      (ac, argv[0], strlen(argv[0]), (list==2));
+    } else {
+      ret = list_variables      (ac, "",      0,               (list==2));
+    }
+  } else if (delete) {
+    if (argc >= 1) {
+      ret = ssh_delete_variable (ac, argv[0], strlen(argv[0]), (delete==2));
+    } else {
+      ret = ssh_delete_variable (ac, "",      0,               (delete==2));
+    }
+  }
+  
+done:
+	ssh_close_authentication_connection(ac);
+	return (ret > 0 ? ret-1 : 10);
+}
